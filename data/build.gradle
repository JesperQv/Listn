apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def rootPath = rootProject.ext

android {
    compileSdkVersion rootPath.compileSdkVersion

    defaultConfig {
        minSdkVersion rootPath.minSdkVersion
        targetSdkVersion rootPath.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BASE_URL", "\"https://api.soundcloud.com/\""
    }

    buildTypes {
        debug {
            buildConfigField "String", "CLIENT_ID", getMyApiKey("clientId")
            buildConfigField "String", "CLIENT_SECRET", getMyApiKey("clientSecret")
        }

        release {
            buildConfigField "String", "CLIENT_ID", "\"" + System.getenv("CLIENT_ID") + "\""
            buildConfigField "String", "CLIENT_SECRET", "\"" + System.getenv("CLIENT_SECRET") + "\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation project(':domain')

    implementation "com.squareup.retrofit2:retrofit:$rootPath.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootPath.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootPath.retrofitVersion"

    implementation "com.squareup.okhttp3:logging-interceptor:$rootPath.okhttpVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootPath.okhttpVersion"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$rootPath.supportLibraryVersion"
    testImplementation "junit:junit:$rootPath.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootPath.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootPath.espressoVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    testImplementation "org.mockito:mockito-core:$rootPath.mockitoVersion"
}
repositories {
    mavenCentral()
}

static def getMyApiKey(String property) {
    Properties properties = new Properties()
    try {
        properties.load(new FileInputStream("api-keys.properties"))
        return "\"" + properties.getProperty(property) + "\""
    } catch (Exception ignored) {
        return "\"" + "noApiKey" + "\""
    }
}

